name: MSBuild

on: [push, pull_request]

jobs:
 msbuild:
  runs-on: windows-latest

  strategy:
   matrix:
    configuration: [Release, ReleaseAVX2, ReleaseFreetype, ReleaseFreetypeAVX2]
    platform: [x64]

  steps:
  - uses: actions/checkout@v4
    with:
      submodules: recursive
      token: ${{ secrets.GITHUB_TOKEN }}

  - name: Initialize and update submodules
    run: |
      Write-Host "Initializing submodules..."
      git submodule update --init --recursive
      Write-Host "Submodule status:"
      git submodule status
    shell: powershell

  - name: Add MSBuild to PATH
    uses: microsoft/setup-msbuild@v2

  - name: Setup Python for ProtectMyTooling
    uses: actions/setup-python@v4
    with:
      python-version: '3.x'

  - name: Cache vcpkg
    uses: actions/cache@v4
    with:
      path: C:\vcpkg
      key: ${{ runner.os }}-vcpkg-${{ hashFiles('**/vcpkg.json') }}
      restore-keys: |
        ${{ runner.os }}-vcpkg-

  - name: Setup vcpkg
    run: |
      if (!(Test-Path "C:\vcpkg")) {
        git clone https://github.com/Microsoft/vcpkg.git C:\vcpkg
        C:\vcpkg\bootstrap-vcpkg.bat
      }
      C:\vcpkg\vcpkg integrate install
    shell: powershell

  - name: Install vcpkg dependencies
    run: |
      C:\vcpkg\vcpkg install cpr:x64-windows-static-md
      C:\vcpkg\vcpkg install nlohmann-json:x64-windows-static-md
      C:\vcpkg\vcpkg install cpr:x64-windows
      C:\vcpkg\vcpkg install nlohmann-json:x64-windows

  - name: Setup ProtectMyTooling
    run: |
      Write-Host "Checking ProtectMyTooling submodule..."
      if (Test-Path "tools\ProtectMyTooling\ProtectMyTooling.py") {
        Write-Host "ProtectMyTooling submodule found, installing dependencies..."
        cd tools\ProtectMyTooling
        pip install -r requirements.txt
        cd ..\..
        Write-Host "ProtectMyTooling setup completed"
      } else {
        Write-Host "ProtectMyTooling submodule not found or not initialized"
        Write-Host "Available submodules:"
        git submodule status
        Write-Host "Directory contents:"
        Get-ChildItem -Path tools -Recurse -Depth 2 | Select-Object FullName
      }
    shell: powershell

  - name: Restore NuGet packages
    working-directory: ${{ github.workspace }}
    run: |
      Write-Host "Restoring NuGet packages with timeout..."
      $slnPath = "${{ github.workspace }}\Amalgam.sln"
      Write-Host "Solution path: $slnPath"
      
      if (!(Test-Path $slnPath)) {
        Write-Host "ERROR: Solution file not found at $slnPath"
        Get-ChildItem ${{ github.workspace }} | Select-Object Name
        exit 1
      }
      
      $timeout = 300
      $job = Start-Job -ScriptBlock { 
        param($path)
        Set-Location (Split-Path $path)
        nuget restore (Split-Path $path -Leaf)
      } -ArgumentList $slnPath
      
      if (Wait-Job $job -Timeout $timeout) {
        Receive-Job $job
        if ($job.State -eq "Failed") {
          Write-Host "NuGet restore failed, retrying..."
          nuget restore Amalgam.sln -Verbosity detailed
        }
      } else {
        Write-Host "NuGet restore timed out, retrying with detailed output..."
        Stop-Job $job
        nuget restore Amalgam.sln -Verbosity detailed
      }
      Remove-Job $job -Force
    shell: powershell

  - name: Build
    working-directory: ${{ github.workspace }}
    run: msbuild Amalgam.sln /p:Platform=${{ matrix.platform }} /p:Configuration=${{ matrix.configuration }}

  - name: Verify obfuscated build
    run: |
      $exePath = "output\${{ matrix.platform }}\${{ matrix.configuration }}\AmalgamLoader.exe"
      if (Test-Path $exePath) {
        Write-Host "âœ“ AmalgamLoader.exe built with enhanced multi-layer protection:"
        Write-Host "  - Build-time: Hyperion + UPX chained obfuscation"
        Write-Host "  - Runtime: Signature randomization with embedded hash detection"
        Write-Host "  - Generic naming (no identifying strings)"
        Write-Host "  - Self-contained processing state"
        $fileSize = (Get-Item $exePath).Length
        Write-Host "File size: $fileSize bytes"
      } else {
        Write-Host "WARNING: AmalgamLoader.exe not found at $exePath"
      }
    shell: powershell

  - uses: actions/upload-artifact@v4
    with:
     name: Amalgam${{ matrix.platform }}${{ matrix.configuration }}
     path: |
       output/${{ matrix.platform }}/${{ matrix.configuration }}/*.dll
       output/${{ matrix.platform }}/${{ matrix.configuration }}/*.exe